{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c501598f-a18e-4a13-b504-e8a27f6823f2",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (2976557460.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[2], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    1.What is the primary goal of Object-Oriented Programming (OOP)?\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "##1.What is the primary goal of Object-Oriented Programming (OOP)?\n",
    "The primary goal of Object-Oriented Programming (OOP) is to organize software design around data, or objects, rather than functions and logic. The key idea is to model real-world entities as software objects that contain both data (attributes) and behavior (methods).\n",
    "More specifically, the primary goals of OOP include:\n",
    "1. Encapsulation: Bundling data and methods that operate on that data within objects, and restricting access to some components, which enhances modularity and maintainability.\n",
    "2. Abstraction: Hiding complex implementation details and showing only the necessary features of an object.\n",
    "3. Inheritance: Creating new classes from existing ones, enabling code reuse and the creation of a hierarchical relationship between classes.\n",
    "4. Polymorphism: Allowing objects of different classes to be treated as objects of a common superclass, particularly to simplify code and enable flexibility and integration.\n",
    "Ultimately, OOP aims to make code more reusable, scalable, and easier to maintain, by mirroring real-world interactions and structures.\n",
    "he primary goal of Object-Oriented Programming (OOP) is to organize software design around data, or objects, rather than functions and logic. The key idea is to model real-world entities as software objects that contain both data (attributes) and behavior (methods).\n",
    "More specifically, the primary goals of OOP include:\n",
    "1. Encapsulation: Bundling data and methods that operate on that data within objects, and restricting access to some components, which enhances modularity and maintainability.\n",
    "2. Abstraction: Hiding complex implementation details and showing only the necessary features of an object.\n",
    "3. Inheritance: Creating new classes from existing ones, enabling code reuse and the creation of a hierarchical relationship between classes.\n",
    "4. Polymorphism: Allowing objects of different classes to be treated as objects of a common superclass, particularly to simplify code and enable flexibility and integration.\n",
    "Ultimately, OOP aims to make code more reusable, scalable, and easier to maintain, by mirroring real-world interactions and structures.\n",
    "\n",
    "2. What is an object in Python?\n",
    "\n",
    "An object is an instance of a class. It is a collection of data (attributes) and methods that operate on the data. Once a class is defined, you can create multiple objects from it.\n",
    "\n",
    "3. What is a class in Python?\n",
    "\n",
    "A class is a blueprint or template for creating objects. It defines the attributes (data) and methods (functions) that its objects will have.\n",
    "\n",
    "4. What are attributes and methods in a class?\n",
    "\n",
    "* Attributes are variables that hold the data associated with a class and its objects (e.g., title, author).\n",
    "* Methods are functions defined inside a class that describe the behaviors of the objects (e.g., check_out(), display_info()).\n",
    "\n",
    "5. What is the difference between class variables and instance variables in Python?\n",
    "\n",
    "* Instance variables are unique to each object. They're defined using self, e.g., self.title.\n",
    "* Class variables are shared across all instances of a class. They are defined outside of any instance methods and not prefixed with self.\n",
    "\n",
    "6. What is the purpose of the self parameter in Python class methods?##\n",
    "\n",
    "self refers to the instance of the class. It allows access to instance variables and methods from within the class. It must be the first parameter in instance methods.\n",
    "\n",
    "7. Book Class Implementation\n",
    "\n",
    "python\n",
    "CopyEdit\n",
    "class Book:\n",
    "    def __init__(self, title, author, isbn, publication_year, available_copies):\n",
    "        self.title = title\n",
    "        self.author = author\n",
    "        self.isbn = isbn\n",
    "        self.publication_year = publication_year\n",
    "        self.available_copies = available_copies\n",
    "\n",
    "    def check_out(self):\n",
    "        if self.available_copies > 0:\n",
    "            self.available_copies -= 1\n",
    "            print(\"Book checked out successfully.\")\n",
    "        else:\n",
    "            print(\"No copies available for checkout.\")\n",
    "\n",
    "    def return_book(self):\n",
    "        self.available_copies += 1\n",
    "        print(\"Book returned successfully.\")\n",
    "\n",
    "    def display_book_info(self):\n",
    "        print(f\"Title: {self.title}\")\n",
    "        print(f\"Author: {self.author}\")\n",
    "        print(f\"ISBN: {self.isbn}\")\n",
    "        print(f\"Publication Year: {self.publication_year}\")\n",
    "        print(f\"Available Copies: {self.available_copies}\")\n",
    "\n",
    "8. Ticket Class Implementation\n",
    "python\n",
    "CopyEdit\n",
    "class Ticket:\n",
    "    def __init__(self, ticket_id, event_name, event_date, venue, seat_number, price):\n",
    "        self.ticket_id = ticket_id\n",
    "        self.event_name = event_name\n",
    "        self.event_date = event_date\n",
    "        self.venue = venue\n",
    "        self.seat_number = seat_number\n",
    "        self.price = price\n",
    "        self.is_reserved = False\n",
    "\n",
    "    def reserve_ticket(self):\n",
    "        if not self.is_reserved:\n",
    "            self.is_reserved = True\n",
    "            print(\"Ticket reserved.\")\n",
    "        else:\n",
    "            print(\"Ticket is already reserved.\")\n",
    "\n",
    "    def cancel_reservation(self):\n",
    "        if self.is_reserved:\n",
    "            self.is_reserved = False\n",
    "            print(\"Reservation canceled.\")\n",
    "        else:\n",
    "            print(\"Ticket is not reserved.\")\n",
    "\n",
    "    def display_ticket_info(self):\n",
    "        print(f\"Ticket ID: {self.ticket_id}\")\n",
    "        print(f\"Event: {self.event_name}\")\n",
    "        print(f\"Date: {self.event_date}\")\n",
    "        print(f\"Venue: {self.venue}\")\n",
    "        print(f\"Seat: {self.seat_number}\")\n",
    "        print(f\"Price: ${self.price}\")\n",
    "        print(f\"Reserved: {'Yes' if self.is_reserved else 'No'}\")\n",
    "\n",
    "9. ShoppingCart Class Implementation\n",
    "python\n",
    "CopyEdit\n",
    "class ShoppingCart:\n",
    "    def __init__(self):\n",
    "        self.items = []\n",
    "\n",
    "    def add_item(self, item):\n",
    "        self.items.append(item)\n",
    "        print(f\"Added {item} to the cart.\")\n",
    "\n",
    "    def remove_item(self, item):\n",
    "        if item in self.items:\n",
    "            self.items.remove(item)\n",
    "            print(f\"Removed {item} from the cart.\")\n",
    "        else:\n",
    "            print(f\"{item} not found in the cart.\")\n",
    "\n",
    "    def view_cart(self):\n",
    "        if self.items:\n",
    "            print(\"Shopping Cart Items:\")\n",
    "            for item in self.items:\n",
    "                print(f\"- {item}\")\n",
    "        else:\n",
    "            print(\"Your cart is empty.\")\n",
    "\n",
    "    def clear_cart(self):\n",
    "        self.items = []\n",
    "        print(\"Shopping cart cleared.\")\n",
    "\n",
    "10. Student Class Implementation\n",
    "python\n",
    "CopyEdit\n",
    "class Student:\n",
    "    def __init__(self, name, age, grade, student_id):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.grade = grade\n",
    "        self.student_id = student_id\n",
    "        self.attendance = {}\n",
    "\n",
    "    def update_attendance(self, date, status):\n",
    "        self.attendance[date] = status\n",
    "        print(f\"Attendance updated: {date} - {status}\")\n",
    "\n",
    "    def get_attendance(self):\n",
    "        return self.attendance\n",
    "\n",
    "    def get_average_attendance(self):\n",
    "        total_days = len(self.attendance)\n",
    "        if total_days == 0:\n",
    "            return 0.0\n",
    "        present_days = sum(1 for status in self.attendance.values() if status.lower() == \"present\")\n",
    "        average = (present_days / total_days) * 100\n",
    "        return round(average, 2)\n",
    "\n",
    "\t\n",
    "\t\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3130499-6844-48f7-b736-0373d79e7b64",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
